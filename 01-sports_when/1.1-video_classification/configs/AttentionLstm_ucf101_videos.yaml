MODEL: #MODEL field
    framework: "Recognizer2D" #Mandatory, indicate the type of network, associate to the 'paddlevideo/modeling/framework/' .
    backbone: #Mandatory, indicate the type of backbone, associate to the 'paddlevideo/modeling/backbones/' .
        name: "ResNet" #Mandatory, The name of backbone. [ResNetTweaksTSM,ResNet] 
        pretrained: "/home/zhangmengxi01/configs/ResNet50_pretrain.pdparams" #Optional, pretrained model path.
        depth: 50 #Optional, the depth of backbone architecture.
    head:
        name: "AttentionLstmHead" #Mandatory, indicate the type of head, associate to the 'paddlevideo/modeling/heads'
        num_classes: 66 #Optional, the number of classes to be classified.
        feature_num: 1
        feature_dims: [2048]
        embedding_size: 256
        lstm_size: 512

DATASET: #DATASET field
    batch_size: 16  #Mandatory, bacth size
    num_workers: 0  #Mandatory, the number of subprocess on each GPU.
    shuffle_valid: True
    train:
        format: "VideoDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "/home/zhangmengxi01/data/ucf101/videos" #Mandatory, train data root path
        file_path: "/home/zhangmengxi01/data/ucf101/annotations/train.list" #Mandatory, train data index file path
    valid:
        format: "VideoDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "/home/zhangmengxi01/data/ucf101/videos" #Mandatory, train data root path
        file_path: "/home/zhangmengxi01/data/ucf101/annotations/val.list" #Mandatory, valid data index file path
    test:
        format: "VideoDataset" #Mandatory, indicate the type of dataset, associate to the 'paddlevidel/loader/dateset'
        data_prefix: "/home/zhangmengxi01/data/ucf101/videos" #Mandatory, train data root path
        file_path: "/home/zhangmengxi01/data/ucf101/annotations/val.list" #Mandatory, valid data index file path


# PIPELINE: #PIPELINE field
#     train: #Mandotary, indicate the pipeline to deal with the training data, associate to the 'paddlevideo/loader/pipelines/'
#         decode:
#             name: "FeatureDecoder" #"VideoDecoder"
#             num_classes: 66
#             max_len: 900
#     valid: #Mandatory, indicate the pipeline to deal with the validing data. associate to the 'paddlevideo/loader/pipelines/'
#         decode:
#             name: "FeatureDecoder" #"VideoDecoder"
#             num_classes: 66
#             max_len: 900
#     test:
#         decode:
#             name: "FeatureDecoder" #"VideoDecoder"
#             num_classes: 66
#             max_len: 900

PIPELINE: #PIPELINE field
    train: #Mandotary, indicate the pipeline to deal with the training data, associate to the 'paddlevideo/loader/pipelines/'
        decode:
            name: "VideoDecoder"
            backend: "decord"
        sample:
            name: "Sampler"
            num_seg: 8
            seg_len: 1
            valid_mode: False
        transform: #Mandotary, image transfrom operator
            - Scale:
                short_size: 256
            - MultiScaleCrop:
                target_size: 256
            - RandomCrop:
                target_size: 224
            - RandomFlip:
            - Image2Array:
            - Normalization:
                mean: [0.485, 0.456, 0.406]
                std: [0.229, 0.224, 0.225]
    valid: #Mandatory, indicate the pipeline to deal with the validing data. associate to the 'paddlevideo/loader/pipelines/'
        decode:
            name: "VideoDecoder"
            backend: "decord"
        sample:
            name: "Sampler"
            num_seg: 8
            seg_len: 1
            valid_mode: True
        transform:
            - Scale:
                short_size: 256
            - CenterCrop:
                target_size: 224
            - Image2Array:
            - Normalization:
                mean: [0.485, 0.456, 0.406]
                std: [0.229, 0.224, 0.225]
    test:  #Mandatory, indicate the pipeline to deal with the validing data. associate to the 'paddlevideo/loader/pipelines/'
        decode:
            name: "VideoDecoder"
            backend: "decord"
        sample:
            name: "Sampler"
            num_seg: 8
            seg_len: 1
            valid_mode: True
        transform:
            - Scale:
                short_size: 256
            - CenterCrop:
                target_size: 224
            - Image2Array:
            - Normalization:
                mean: [0.485, 0.456, 0.406]
                std: [0.229, 0.224, 0.225]

# OPTIMIZER: #OPTIMIZER field
#     name: 'RMSProp' #Mandatory, the type of optimizer, associate to the 'paddlevideo/solver/'
#     centered: True
#     learning_rate: #Mandatory, the type of learning rate scheduler, associate to the 'paddlevideo/solver/'
#         name: 'PiecewiseDecay'
#         boundaries: [5, 8]
#         values: [0.25, 0.000025, 0.0000025]
#     weight_decay:
#         name: 'L2'
#         value: 0.0004

OPTIMIZER: #OPTIMIZER field
    name: 'Adam' #Mandatory, the type of optimizer, associate to the 'paddlevideo/solver/'
    learning_rate: #Mandatory, the type of learning rate scheduler, associate to the 'paddlevideo/solver/'
        name: 'PiecewiseDecay'
        boundaries: [20, 25]
        values: [0.0001, 0.000025, 0.0000025]
  

METRIC:
    name: 'CenterCropMetric'

INFERENCE:
    name: 'AttentionLSTM_Inference_helper'
    num_classes: 66 #Optional, the number of classes to be classified.
    feature_num: 1
    feature_dims: [2048]
    embedding_size: 256
    lstm_size: 512

model_name: "AttentionLSTM"
output_dir: "/home/zhangmengxi01/output/attentionlstm/0719"
log_interval: 10 #Optional, the interal of logger, default:10
epochs: 30 #Mandatory, total epoch
save_interval: 2
log_level: "INFO"
